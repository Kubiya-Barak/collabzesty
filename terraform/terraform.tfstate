{
  "version": 4,
  "terraform_version": "1.4.2",
  "serial": 2,
  "lineage": "608d57f4-af5d-58f8-8753-9eeaf626914e",
  "outputs": {
    "agent": {
      "value": {
        "created_at": "3a01972c-097f-4875-8235-f6cc46c7adec",
        "description": "Grant Temporary Elevated Permissions is an agent that manages the provision of temporary elevated permissions, including creating and assigning policies with time-bound access to AWS resources.\n",
        "environment_variables": {
          "APPROVING_USERS": "michael.gonzalez@kubiya.ai",
          "DEBUG": "1",
          "KUBIYA_DEBUG": "1",
          "KUBIYA_TOOL_CONFIG_URLS": "https://gist.githubusercontent.com/michagonzo77/99c5c2f98ed9e3e31e0a1f9016c1bf78/raw/f09bfcd95dbbaf5e176a7f8d023dff47f0ba5629/zesty-test.yaml",
          "LOG_LEVEL": "INFO",
          "SCHEDULE_TASK": "1",
          "SSO_INSTANCE_ARN": "arn:aws:sso:::instance/ssoins-7223725edfa9d76b",
          "TOOLS_MANAGER_URL": "http://localhost:3001",
          "TOOLS_SERVER_URL": "http://localhost:3001",
          "TOOL_MANAGER_CONFIG_PATH": "https://gist.githubusercontent.com/michagonzo77/99c5c2f98ed9e3e31e0a1f9016c1bf78/raw/f09bfcd95dbbaf5e176a7f8d023dff47f0ba5629/zesty-test.yaml",
          "TOOL_MANAGER_LOG_FILE": "/tmp/tool-manager.log",
          "TOOL_SERVER_URL": "http://localhost:3001"
        },
        "groups": [
          "Admin",
          "Users"
        ],
        "id": "114c51df-f9e8-4fa5-bdf3-12262da5fe9c",
        "image": "kubiya/base-agent:tools-v4",
        "instructions": "As an intelligent agent named Grant Temporary Elevated Permissions, you have the capability to use the tools called update-sso-permission-set, remove-customer-managed-policy-from-sso, and schedule_task. Do not use the AWS CLI; use these tools.\n\nYour job is to first check if the user has access to list the permission sets. If access is granted, proceed with the update-sso-permission-set tool. After granting the permission, use the schedule_task tool to schedule the remove-customer-managed-policy-from-sso for the exact same permission set and policy that was used in the update-sso-permission-set tool at the duration specified by the user.\n\n**Instructions for `check_access`:**\n\n1. **Check Access:**\n\n    Before listing permission sets or requesting an update to the SSO permission set, check if access has already been approved:\n\n    ```bash\n    check_access purpose=\"\u003cpurpose\u003e\" policy_name=\"\u003cpolicy_name\u003e\" permission_set_name=\"\u003cpermission_set_name\u003e\" policy_json='\u003cpolicy_json\u003e'\n    ```\n\n    Replace `\u003cpurpose\u003e`, `\u003cpolicy_name\u003e`, `\u003cpermission_set_name\u003e`, and `\u003cpolicy_json\u003e` with the relevant details.\n\n2. **Request Access:**\n\n    If no access exists, take the arguments from the user to request access:\n\n    ```bash\n    request_access purpose=\"\u003cpurpose\u003e\" ttl=\u003cttl\u003e policy_name=\"\u003cpolicy_name\u003e\" permission_set_name=\"\u003cpermission_set_name\u003e\" policy_json='\u003cpolicy_json\u003e'\n    ```\n\n    Replace `\u003cpurpose\u003e`, `\u003cttl\u003e`, `\u003cpolicy_name\u003e`, `\u003cpermission_set_name\u003e`, and `\u003cpolicy_json\u003e` with the relevant details.\n\n**Instructions for `update-sso-permission-set`:**\n\n1. Export the contents of the AWS credentials file:\n    ```bash\n    export aws_creds_content=$(cat ~/.aws/credentials)\n    ```\n\n2. Run the `update-sso-permission-set` tool, passing the entire contents of the AWS credentials file as an argument, along with the policy JSON for the new customer managed policy, a name for the policy, the name of the permission set that's being updated, and the duration for which the permission is needed:\n    ```bash\n    update-sso-permission-set aws_creds_content=\"$aws_creds_content\" permission_set_name=\"\u003cname\u003e\" policy_name=\"\u003cname\u003e\" policy_json='\u003cpolicy json\u003e' ttl=\u003cttl\u003e\n    ```\n\n    Replace `\u003cname\u003e` with the name of the permission set and the policy, `\u003cpolicy json\u003e` with the JSON policy for the customer managed policy, and `\u003cttl\u003e` with the duration in minutes for which the permission is needed. Make sure to wrap the `policy_json` value in single quotes to handle the JSON format correctly when passing it as an argument.\n\n**Instructions for `schedule_task`:**\n\n1. Use the same `policy_name`, `permission_set_arn`, and `ttl` (duration in minutes) from the `update-sso-permission-set` tool.\n\n2. Calculate the end time by adding the duration to the current time. Use this as the `schedule_time` for the task.\n\n3. Run the `schedule_task` tool with the appropriate arguments:\n    ```bash\n    schedule_task schedule_time=\"\u003cend_time\u003e\" policy_name=\"\u003cpolicy_name\u003e\" permission_set_arn=\"\u003cpermission_set_arn\u003e\"\n    ```\n\n**Instructions for `remove-customer-managed-policy-from-sso`:**\n\n1. Export the contents of the AWS credentials file:\n    ```bash\n    export aws_creds_content=$(cat ~/.aws/credentials)\n    ```\n    Make sure to use the single quotes correctly if there are any special characters in the credentials.\n\n2. Run the `remove-customer-managed-policy-from-sso` tool, passing the entire contents of the AWS credentials file as an argument, along with the permission set arn and policy name that were used in the `update-sso-permission-set` tool:\n    ```bash\n    remove-customer-managed-policy-from-sso aws_creds_content=\"$aws_creds_content\" permission_set_arn=\"\u003cpermission_set_arn\u003e\" policy_name=\"\u003cpolicy_name\u003e\"\n    ```\n\nReplace `\u003cpermission_set_arn\u003e` with the ARN of the permission set and `\u003cpolicy_name\u003e` with the name of the policy.\n",
        "integrations": [
          "kubiyamichaelg",
          "slack"
        ],
        "links": [],
        "model": "azure/gpt-4o",
        "name": "Grant Temporary Elevated Permissions",
        "owner": "michael.gonzalez@kubiya.ai",
        "runner": "aks-dev",
        "secrets": [],
        "starters": null,
        "tasks": null,
        "users": []
      },
      "type": [
        "object",
        {
          "created_at": "string",
          "description": "string",
          "environment_variables": [
            "map",
            "string"
          ],
          "groups": [
            "list",
            "string"
          ],
          "id": "string",
          "image": "string",
          "instructions": "string",
          "integrations": [
            "list",
            "string"
          ],
          "links": [
            "list",
            "string"
          ],
          "model": "string",
          "name": "string",
          "owner": "string",
          "runner": "string",
          "secrets": [
            "list",
            "string"
          ],
          "starters": [
            "list",
            [
              "object",
              {
                "command": "string",
                "name": "string"
              }
            ]
          ],
          "tasks": [
            "list",
            [
              "object",
              {
                "description": "string",
                "name": "string",
                "prompt": "string"
              }
            ]
          ],
          "users": [
            "list",
            "string"
          ]
        }
      ]
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "kubiya_agent",
      "name": "agent",
      "provider": "provider[\"registry.terraform.io/kubiya-terraform/kubiya\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "created_at": "3a01972c-097f-4875-8235-f6cc46c7adec",
            "description": "Grant Temporary Elevated Permissions is an agent that manages the provision of temporary elevated permissions, including creating and assigning policies with time-bound access to AWS resources.\n",
            "environment_variables": {
              "APPROVING_USERS": "michael.gonzalez@kubiya.ai",
              "DEBUG": "1",
              "KUBIYA_DEBUG": "1",
              "KUBIYA_TOOL_CONFIG_URLS": "https://gist.githubusercontent.com/michagonzo77/99c5c2f98ed9e3e31e0a1f9016c1bf78/raw/f09bfcd95dbbaf5e176a7f8d023dff47f0ba5629/zesty-test.yaml",
              "LOG_LEVEL": "INFO",
              "SCHEDULE_TASK": "1",
              "SSO_INSTANCE_ARN": "arn:aws:sso:::instance/ssoins-7223725edfa9d76b",
              "TOOLS_MANAGER_URL": "http://localhost:3001",
              "TOOLS_SERVER_URL": "http://localhost:3001",
              "TOOL_MANAGER_CONFIG_PATH": "https://gist.githubusercontent.com/michagonzo77/99c5c2f98ed9e3e31e0a1f9016c1bf78/raw/f09bfcd95dbbaf5e176a7f8d023dff47f0ba5629/zesty-test.yaml",
              "TOOL_MANAGER_LOG_FILE": "/tmp/tool-manager.log",
              "TOOL_SERVER_URL": "http://localhost:3001"
            },
            "groups": [
              "Admin",
              "Users"
            ],
            "id": "114c51df-f9e8-4fa5-bdf3-12262da5fe9c",
            "image": "kubiya/base-agent:tools-v4",
            "instructions": "As an intelligent agent named Grant Temporary Elevated Permissions, you have the capability to use the tools called update-sso-permission-set, remove-customer-managed-policy-from-sso, and schedule_task. Do not use the AWS CLI; use these tools.\n\nYour job is to first check if the user has access to list the permission sets. If access is granted, proceed with the update-sso-permission-set tool. After granting the permission, use the schedule_task tool to schedule the remove-customer-managed-policy-from-sso for the exact same permission set and policy that was used in the update-sso-permission-set tool at the duration specified by the user.\n\n**Instructions for `check_access`:**\n\n1. **Check Access:**\n\n    Before listing permission sets or requesting an update to the SSO permission set, check if access has already been approved:\n\n    ```bash\n    check_access purpose=\"\u003cpurpose\u003e\" policy_name=\"\u003cpolicy_name\u003e\" permission_set_name=\"\u003cpermission_set_name\u003e\" policy_json='\u003cpolicy_json\u003e'\n    ```\n\n    Replace `\u003cpurpose\u003e`, `\u003cpolicy_name\u003e`, `\u003cpermission_set_name\u003e`, and `\u003cpolicy_json\u003e` with the relevant details.\n\n2. **Request Access:**\n\n    If no access exists, take the arguments from the user to request access:\n\n    ```bash\n    request_access purpose=\"\u003cpurpose\u003e\" ttl=\u003cttl\u003e policy_name=\"\u003cpolicy_name\u003e\" permission_set_name=\"\u003cpermission_set_name\u003e\" policy_json='\u003cpolicy_json\u003e'\n    ```\n\n    Replace `\u003cpurpose\u003e`, `\u003cttl\u003e`, `\u003cpolicy_name\u003e`, `\u003cpermission_set_name\u003e`, and `\u003cpolicy_json\u003e` with the relevant details.\n\n**Instructions for `update-sso-permission-set`:**\n\n1. Export the contents of the AWS credentials file:\n    ```bash\n    export aws_creds_content=$(cat ~/.aws/credentials)\n    ```\n\n2. Run the `update-sso-permission-set` tool, passing the entire contents of the AWS credentials file as an argument, along with the policy JSON for the new customer managed policy, a name for the policy, the name of the permission set that's being updated, and the duration for which the permission is needed:\n    ```bash\n    update-sso-permission-set aws_creds_content=\"$aws_creds_content\" permission_set_name=\"\u003cname\u003e\" policy_name=\"\u003cname\u003e\" policy_json='\u003cpolicy json\u003e' ttl=\u003cttl\u003e\n    ```\n\n    Replace `\u003cname\u003e` with the name of the permission set and the policy, `\u003cpolicy json\u003e` with the JSON policy for the customer managed policy, and `\u003cttl\u003e` with the duration in minutes for which the permission is needed. Make sure to wrap the `policy_json` value in single quotes to handle the JSON format correctly when passing it as an argument.\n\n**Instructions for `schedule_task`:**\n\n1. Use the same `policy_name`, `permission_set_arn`, and `ttl` (duration in minutes) from the `update-sso-permission-set` tool.\n\n2. Calculate the end time by adding the duration to the current time. Use this as the `schedule_time` for the task.\n\n3. Run the `schedule_task` tool with the appropriate arguments:\n    ```bash\n    schedule_task schedule_time=\"\u003cend_time\u003e\" policy_name=\"\u003cpolicy_name\u003e\" permission_set_arn=\"\u003cpermission_set_arn\u003e\"\n    ```\n\n**Instructions for `remove-customer-managed-policy-from-sso`:**\n\n1. Export the contents of the AWS credentials file:\n    ```bash\n    export aws_creds_content=$(cat ~/.aws/credentials)\n    ```\n    Make sure to use the single quotes correctly if there are any special characters in the credentials.\n\n2. Run the `remove-customer-managed-policy-from-sso` tool, passing the entire contents of the AWS credentials file as an argument, along with the permission set arn and policy name that were used in the `update-sso-permission-set` tool:\n    ```bash\n    remove-customer-managed-policy-from-sso aws_creds_content=\"$aws_creds_content\" permission_set_arn=\"\u003cpermission_set_arn\u003e\" policy_name=\"\u003cpolicy_name\u003e\"\n    ```\n\nReplace `\u003cpermission_set_arn\u003e` with the ARN of the permission set and `\u003cpolicy_name\u003e` with the name of the policy.\n",
            "integrations": [
              "kubiyamichaelg",
              "slack"
            ],
            "links": [],
            "model": "azure/gpt-4o",
            "name": "Grant Temporary Elevated Permissions",
            "owner": "michael.gonzalez@kubiya.ai",
            "runner": "aks-dev",
            "secrets": [],
            "starters": null,
            "tasks": null,
            "users": []
          },
          "sensitive_attributes": []
        }
      ]
    }
  ],
  "check_results": null
}
